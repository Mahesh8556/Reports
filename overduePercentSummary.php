<?php

ob_start();
include "main.php";
require_once('dbconnect.php');

// ini_set('display_errors', '1');
// ini_set('display_startup_errors', '1');
// error_reporting(E_ALL);
ini_set('MAX_EXECUTION_TIME',4200);

use simitsdk\phpjasperxml\PHPJasperXML;

$filename = __DIR__ . '/overduepercentagereport.jrxml';




$data = [];
$faker = Faker\Factory::create('en_US');

//  $conn = pg_connect("host=127.0.0.1 dbname=hrdatabase user=postgres password=tushar");


//variables

$edate = $_GET['edate'];
$branched = $_GET['branched']; // branch code
$bankName = $_GET['bankName'];
$branchName = $_GET['branchName'];
$schemeid = $_GET['schemeid'];


// $schemeid=$_GET['schemeid']; 
// $bankName  = $_GET['bankName'];
// $BranchName = $_GET['branchName'];
// // $schemeCode=$_GET['schemeCode'];
// $BRANCH_CODE=$_GET['branch'];
// $date=$_GET['date'];

$branchName_ = str_replace("'", "", $branchName);
$bankName_ = str_replace("'", "", $bankName);
$date = str_replace("'", "", $edate);


// $bankName_ = str_replace("'", "", $bankName);
// $BranchName_ = str_replace("'", "", $BranchName);
// $date1 = str_replace("'", "", $date);

$DD = "'DD/MM/YYYY'";
$P = "'P'";
$D = "'D'";
$LN = "'LN'";
$CC = "'CC'";
$DS = "'DS'";
$TRAN_STATUS ="'1'";
$space= "' '";
$DUEBAL = "'DUEBAL'";
// $actype= "'actype'";




$query =

'SELECT 
TOTAL_SUMMARY."S_APPL", TOTAL_SUMMARY."S_NAME", "TOTAL_NO_OF_AC", "TOTAL_CLOSING_BALANCE", 
"DUE_NO_OF_AC" ,COALESCE("DUE_BALANCE",0) "DUE_BALANCE", 
COALESCE("EXP_NO_OF_AC",0) "EXP_NO_OF_AC", 
"EXP_CLOSING_BALANCE" 
From 
( 
SELECT 
    "S_APPL", "S_NAME", 
    SUM("NO_OF_AC") "TOTAL_NO_OF_AC", 
    SUM("CLOSING_BALANCE") "TOTAL_CLOSING_BALANCE" 
From 
( 
SELECT 
    SCHEMAST."S_APPL", SCHEMAST."S_NAME", 
    LNMASTER."AC_ACNOTYPE", LNMASTER."AC_TYPE", 
    LNMASTER."AC_NO", LNMASTER."BANKACNO" , VWTMPZLNBALANCE."CLOSING_BALANCE", 
    CASE "CLOSING_BALANCE"  WHEN 0 THEN  0  ELSE 1 END "NO_OF_AC" 
From 
   SCHEMAST , LNMASTER, 
(
SELECT LNMASTER."AC_ACNOTYPE", LNMASTER."AC_TYPE", LNMASTER."BANKACNO",LNMASTER."AC_NO", LNMASTER."AC_OPDATE", LNMASTER."AC_CLOSEDT" 
, (COALESCE(CASE LNMASTER."AC_OP_CD"  WHEN '.$D.' THEN  CAST(LNMASTER."AC_OP_BAL" AS FLOAT)  ELSE (-1) * CAST(LNMASTER."AC_OP_BAL" AS FLOAT) END,0) 
+ COALESCE(CAST(LOANTRAN."TRAN_AMOUNT" AS FLOAT),0) + COALESCE(CAST(DAILYTRAN."DAILY_AMOUNT" AS FLOAT),0)) "CLOSING_BALANCE"
                ,  (COALESCE(CASE LNMASTER."AC_OP_CD" WHEN '.$D.' THEN LNMASTER."AC_RECBLEINT_OP" ELSE (-1) * CAST(LNMASTER."AC_RECBLEINT_OP" AS FLOAT) END,0) 
                    + COALESCE(CAST(LOANTRAN."RECPAY_INT_AMOUNT" AS FLOAT),0) + COALESCE(CAST(DAILYTRAN."DAILY_RECPAY_INT_AMOUNT" AS FLOAT),0) 
                      + COALESCE(CASE LNMASTER."AC_OP_CD" WHEN '.$D.' THEN CAST("AC_RECBLEODUEINT_OP" AS FLOAT) ELSE (-1) * CAST(LNMASTER."AC_RECBLEODUEINT_OP" AS FLOAT) END,0) 
                    + COALESCE(CAST(LOANTRAN."OTHER10_AMOUNT" AS FLOAT),0) + COALESCE(CAST(DAILYTRAN."DAILY_OTHER10_AMOUNT" AS FLOAT),0)) "RECPAY_INT_AMOUNT" 
    FROM LNMASTER LEFT OUTER JOIN
          ( SELECT "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO", COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("TRAN_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("TRAN_AMOUNT" AS FLOAT) END),0) "TRAN_AMOUNT" 
               , COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("RECPAY_INT_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS FLOAT) END),0) "RECPAY_INT_AMOUNT" 
               , COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("OTHER10_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("OTHER10_AMOUNT" AS FLOAT)  END),0) "OTHER10_AMOUNT"  
           FROM LOANTRAN WHERE CAST("TRAN_DATE" AS DATE) <= TO_DATE('.$edate.', '.$DD.')
                GROUP BY "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO" ) LOANTRAN 
                ON LNMASTER."AC_TYPE"  = LOANTRAN."TRAN_ACTYPE" AND LNMASTER."BANKACNO" =  LOANTRAN."TRAN_ACNO" LEFT OUTER JOIN
          ( SELECT "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO", COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("TRAN_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("TRAN_AMOUNT" AS FLOAT) END),0) "DAILY_AMOUNT" 
                , COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("RECPAY_INT_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS FLOAT) END),0) "DAILY_RECPAY_INT_AMOUNT"  
                , COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("OTHER10_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("OTHER10_AMOUNT" AS FLOAT) END),0) "DAILY_OTHER10_AMOUNT"  
                FROM DAILYTRAN WHERE CAST("TRAN_DATE" AS DATE) <= TO_DATE('.$edate.', '.$DD.')
                AND "TRAN_STATUS" = '.$TRAN_STATUS.' GROUP BY "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO"
          ) DAILYTRAN ON LNMASTER."AC_TYPE"  = DAILYTRAN."TRAN_ACTYPE" AND LNMASTER."BANKACNO" =  DAILYTRAN."TRAN_ACNO" Where
           ((CAST(LNMASTER."AC_OPDATE" AS DATE) IS NULL) OR (CAST(LNMASTER."AC_OPDATE" AS DATE) <= To_DATE('.$edate.','.$DD.')))
           AND ((CAST(LNMASTER."AC_CLOSEDT" AS DATE) IS NULL) OR (CAST(LNMASTER."AC_CLOSEDT" AS DATE) > To_DATE('.$edate.','.$DD.')))
)	 
VWTMPZLNBALANCE 
Where 
    SCHEMAST.id = LNMASTER."AC_TYPE" 
    AND LNMASTER."AC_TYPE" = VWTMPZLNBALANCE."AC_TYPE" 
    AND LNMASTER."BANKACNO" = VWTMPZLNBALANCE."BANKACNO" AND "CLOSING_BALANCE" > 0  
) s GROUP BY "S_APPL", "S_NAME" 
) TOTAL_SUMMARY 

LEFT OUTER JOIN 
(SELECT 
    "S_APPL", "S_NAME", 
    SUM("NO_OF_AC") "DUE_NO_OF_AC", 
    SUM("DUE_BALANCE") "DUE_BALANCE" 
From 
( 
SELECT 
    SCHEMAST."S_APPL", SCHEMAST."S_NAME", 
    LNMASTER."AC_ACNOTYPE", LNMASTER."AC_TYPE", 
    LNMASTER."AC_NO", LNMASTER."BANKACNO", VWTMPZLNOVERDUE."DUEBALANCE" "DUE_BALANCE", 
    CASE "DUEBALANCE"  WHEN 0 THEN  0  ELSE 1 END "NO_OF_AC" 
From 
    SCHEMAST , LNMASTER, 
(
SELECT SCHEMAST."S_APPL",SCHEMAST."S_APPL" || '.$space. ' || SCHEMAST."S_NAME" "SCHEME", LNMASTER."AC_ACNOTYPE", LNMASTER."AC_TYPE", LNMASTER."AC_NO", LNMASTER."AC_NAME",  LNMASTER."BANKACNO", LNMASTER."AC_OPDATE", LNMASTER."idmasterID",
LNMASTER."AC_CLOSEDT",  DIRECTORMASTER.ID || '.$space. ' || DIRECTORMASTER."NAME" "DIRECTORMASTER", "AC_RECOMMEND_BY" "DIRECTOR",
AUTHORITYMASTER.ID || '.$space. ' || AUTHORITYMASTER."NAME" "AUTHORITYMASTER", "AC_AUTHORITY" "AUTHORITY",
RECOVERYCLEARKMASTER.ID || '.$space. ' || RECOVERYCLEARKMASTER."NAME" "RECOVERYCLEARKMASTER", "AC_RECOVERY_CLERK",
OWNBRANCHMASTER.ID || '.$space. ' || OWNBRANCHMASTER."NAME" "BRANCH",LNMASTER."BRANCH_CODE",
CUSTOMERADDRESS."AC_CTCODE" "CITY", CITYMASTER."CITY_NAME" "CITYNAME", CUSTOMERADDRESS."AC_ADDR" || '.$space. ' || CUSTOMERADDRESS."AC_AREA" "ADDRESS",
LNMASTER."AC_MORATORIUM_PERIOD",LNMASTER."AC_SANCTION_AMOUNT", LNMASTER."AC_GRACE_PERIOD", LNMASTER."AC_REPAYMODE", IDMASTER."AC_MOBILENO",
       (COALESCE(CASE LNMASTER."AC_OP_CD"  WHEN '.$D.' THEN  CAST(LNMASTER."AC_OP_BAL" AS FLOAT)  ELSE 
                  (-1) * CAST(LNMASTER."AC_OP_BAL" AS FLOAT) END,0) +
         COALESCE(CAST(TRANTABLE."TRAN_AMOUNT" AS FLOAT),0) )
         "CLOSING_BALANCE"
       ,(COALESCE(CASE LNMASTER."AC_OP_CD" WHEN '.$D.' THEN LNMASTER."AC_RECBLEINT_OP" ELSE
                  (-1) * LNMASTER."AC_RECBLEINT_OP" END,0) + 
         COALESCE(CAST(TRANTABLE."RECPAY_INT_AMOUNT" AS FLOAT),0)
       + COALESCE(CASE LNMASTER."AC_OP_CD" WHEN '.$D.' THEN CAST(LNMASTER."AC_RECBLEODUEINT_OP" AS FLOAT) ELSE 
                  (-1) * CAST(LNMASTER."AC_RECBLEODUEINT_OP" AS FLOAT) END,0) + 
         COALESCE(CAST(TRANTABLE."OTHER10_AMOUNT" AS FLOAT),0) ) "RECPAY_INT_AMOUNT",
LNMASTER."AC_INSTALLMENT",OIRINTBALANCE(SCHEMAST."S_APPL",LNMASTER."BANKACNO",'.$edate.',0) "OVERDUEINTEREST",
(case  when CAST (LNMASTER."AC_INSTALLMENT" as FLOAT) <> 0  then CEIL(CAST(LNMASTER."AC_SANCTION_AMOUNT" AS FLOAT)/CAST(LNMASTER."AC_INSTALLMENT" AS FLOAT))else 0 end ) "TOTALINSTALLMENTS",
(case  when CAST (LNMASTER."AC_INSTALLMENT" as FLOAT) <> 0  then ceil(DueBalance(CAST(SCHEMAST."S_APPL" AS CHARACTER VARYING),LNMASTER."BANKACNO",'.$edate.','.$DUEBAL.',0)/
     CAST(LNMASTER."AC_INSTALLMENT" AS FLOAT))else 0 end ) "DUEINSTALLMENT",
     (case  when CAST (LNMASTER."AC_INSTALLMENT" as FLOAT) <> 0  then ceil((CAST(LNMASTER."AC_SANCTION_AMOUNT" AS FLOAT)-
     DueBalance(CAST(SCHEMAST."S_APPL" AS CHARACTER VARYING),LNMASTER."BANKACNO",'.$edate.','.$DUEBAL.',0)
     )/CAST(LNMASTER."AC_INSTALLMENT" AS FLOAT)) else 0 end )"PAIDINSTALLMENTS",
DueBalance(CAST(SCHEMAST."S_APPL" AS CHARACTER VARYING),LNMASTER."BANKACNO",'.$edate.','.$DUEBAL.',0) "DUEBALANCE",
"AC_EXPIRE_DATE", 
overduedate(CAST(SCHEMAST."S_APPL" AS INTEGER),LNMASTER."BANKACNO", CAST('.$edate.' AS CHARACTER VARYING) ,
CAST(DueBalance(CAST(SCHEMAST."S_APPL" AS CHARACTER VARYING),LNMASTER."BANKACNO",'.$edate.','.$DUEBAL.',0) AS CHARACTER VARYING), 
CAST(LNMASTER."AC_INSTALLMENT" AS CHARACTER VARYING)) "OVERDUEDATE"
       FROM LNMASTER LEFT JOIN SCHEMAST ON SCHEMAST.ID= LNMASTER."AC_TYPE"
       LEFT JOIN DIRECTORMASTER ON DIRECTORMASTER.ID=CAST(LNMASTER."AC_RECOMMEND_BY" AS INTEGER)
       LEFT JOIN RECOVERYCLEARKMASTER ON RECOVERYCLEARKMASTER.ID=CAST(LNMASTER."AC_RECOVERY_CLERK" AS INTEGER)
       LEFT JOIN AUTHORITYMASTER ON AUTHORITYMASTER.ID=LNMASTER."AC_AUTHORITY" 
       LEFT JOIN OWNBRANCHMASTER ON OWNBRANCHMASTER.ID=LNMASTER."BRANCH_CODE"
       LEFT JOIN CUSTOMERADDRESS ON CUSTOMERADDRESS."idmasterID"=LNMASTER."idmasterID" 
       AND CUSTOMERADDRESS."AC_ADDTYPE" ='.$P.'
       LEFT JOIN CITYMASTER ON CITYMASTER.ID= CUSTOMERADDRESS."AC_CTCODE"
       LEFT JOIN IDMASTER ON IDMASTER.ID=LNMASTER."idmasterID",
             ( SELECT "TRAN_ACNOTYPE" , "TRAN_ACTYPE" , "TRAN_ACNO" , 
COALESCE(SUM(COALESCE(CAST("TRAN_AMOUNT" AS FLOAT),0) + COALESCE("DAILY_AMOUNT",0)),0) "TRAN_AMOUNT",
COALESCE(SUM(COALESCE(CAST("RECPAY_INT_AMOUNT" AS FLOAT),0) + COALESCE("DAILY_RECPAY_INT_AMOUNT",0)),0) "RECPAY_INT_AMOUNT",
COALESCE(SUM(COALESCE(CAST("OTHER10_AMOUNT" AS FLOAT),0) + COALESCE("DAILY_OTHER10_AMOUNT",0)),0) "OTHER10_AMOUNT" FROM
(SELECT * FROM (SELECT "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO", 
              COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("TRAN_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("TRAN_AMOUNT" AS FLOAT) END),0) "TRAN_AMOUNT" 
             , COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("RECPAY_INT_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS FLOAT) END),0) "RECPAY_INT_AMOUNT"
             , COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN CAST ("OTHER10_AMOUNT" AS FLOAT)  ELSE (-1) * CAST ("OTHER10_AMOUNT" AS FLOAT) END),0) "OTHER10_AMOUNT", 
               0 "DAILY_AMOUNT",0 "DAILY_RECPAY_INT_AMOUNT",0 "DAILY_OTHER10_AMOUNT"
               FROM LOANTRAN 
       WHERE cast("TRAN_DATE" as date) <= TO_DATE('.$edate.', '.$DD.') AND   "TRAN_ACNOTYPE" IN ('.$LN.','.$CC.','.$DS.')
       GROUP BY "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO"		
       UNION ALL		
       SELECT "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO", COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("TRAN_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("TRAN_AMOUNT" AS FLOAT) END),0) "DAILY_AMOUNT" 
       , COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("RECPAY_INT_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS FLOAT) END),0) "DAILY_RECPAY_INT_AMOUNT"  
       , COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST ("OTHER10_AMOUNT" AS FLOAT)  ELSE (-1) * CAST ("OTHER10_AMOUNT" AS FLOAT)  END),0) "DAILY_OTHER10_AMOUNT"  ,
       0 "TRAN_AMOUNT", 0  "RECPAY_INT_AMOUNT", 0 "OTHER10_AMOUNT"  FROM DAILYTRAN WHERE cast("TRAN_DATE" as date) <= TO_DATE('.$edate.', '.$DD.')
       AND "TRAN_STATUS" = '.$TRAN_STATUS.'  AND "TRAN_ACNOTYPE" IN ('.$LN.','.$CC.','.$DS.')
       GROUP BY "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO") RS
       ORDER BY "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO")AMOUNT
           GROUP BY "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO"
) TRANTABLE
       Where LNMASTER."AC_ACNOTYPE"  = TRANTABLE."TRAN_ACNOTYPE"
        AND LNMASTER."AC_TYPE"  = CAST(TRANTABLE."TRAN_ACTYPE" AS INTEGER)
        AND LNMASTER."BANKACNO"=  TRANTABLE."TRAN_ACNO"
        AND LNMASTER."BRANCH_CODE" IN (2)
        AND LNMASTER."status"=1 AND LNMASTER."SYSCHNG_LOGIN" IS NOT NULL
        ORDER BY SCHEMAST."S_APPL", LNMASTER."BANKACNO" 
)	 
VWTMPZLNOVERDUE 
Where 
     SCHEMAST.ID = LNMASTER."AC_TYPE" 
    AND LNMASTER."AC_TYPE" = VWTMPZLNOVERDUE."AC_TYPE" 
    AND LNMASTER."BANKACNO" = VWTMPZLNOVERDUE."BANKACNO" 
    AND CAST(LNMASTER."AC_EXPIRE_DATE" AS DATE) > CDATE('.$edate.') AND "CLOSING_BALANCE" > 0  
) s GROUP BY "S_APPL", "S_NAME"
) DUE_SUMMARY 
ON TOTAL_SUMMARY."S_APPL" = DUE_SUMMARY."S_APPL" 

 LEFT OUTER JOIN 
( 
SELECT 
    "S_APPL", "S_NAME", 
    SUM("NO_OF_AC") "EXP_NO_OF_AC", 
    SUM("CLOSING_BALANCE") "EXP_CLOSING_BALANCE" 
From 
( 
SELECT 
    SCHEMAST."S_APPL", SCHEMAST."S_NAME", 
    LNMASTER."AC_ACNOTYPE", LNMASTER."AC_TYPE", 
    LNMASTER."AC_NO", LNMASTER."BANKACNO" , VWTMPZLNBALANCE."CLOSING_BALANCE", 
    CASE "CLOSING_BALANCE"  WHEN 0 THEN  0  ELSE 1 END "NO_OF_AC" 
From 
    SCHEMAST , LNMASTER, 
(
SELECT LNMASTER."AC_ACNOTYPE", LNMASTER."AC_TYPE", LNMASTER."BANKACNO",LNMASTER."AC_NO", LNMASTER."AC_OPDATE", LNMASTER."AC_CLOSEDT" 
, (COALESCE(CASE LNMASTER."AC_OP_CD"  WHEN '.$D.' THEN  CAST(LNMASTER."AC_OP_BAL" AS FLOAT)  ELSE (-1) * CAST(LNMASTER."AC_OP_BAL" AS FLOAT) END,0) 
+ COALESCE(CAST(LOANTRAN."TRAN_AMOUNT" AS FLOAT),0) + COALESCE(CAST(DAILYTRAN."DAILY_AMOUNT" AS FLOAT),0)) "CLOSING_BALANCE"
                ,  (COALESCE(CASE LNMASTER."AC_OP_CD" WHEN '.$D.' THEN LNMASTER."AC_RECBLEINT_OP" ELSE (-1) * CAST(LNMASTER."AC_RECBLEINT_OP" AS FLOAT) END,0) 
                    + COALESCE(CAST(LOANTRAN."RECPAY_INT_AMOUNT" AS FLOAT),0) + COALESCE(CAST(DAILYTRAN."DAILY_RECPAY_INT_AMOUNT" AS FLOAT),0) 
                      + COALESCE(CASE LNMASTER."AC_OP_CD" WHEN '.$D.' THEN CAST("AC_RECBLEODUEINT_OP" AS FLOAT) ELSE (-1) * CAST(LNMASTER."AC_RECBLEODUEINT_OP" AS FLOAT) END,0) 
                    + COALESCE(CAST(LOANTRAN."OTHER10_AMOUNT" AS FLOAT),0) + COALESCE(CAST(DAILYTRAN."DAILY_OTHER10_AMOUNT" AS FLOAT),0)) "RECPAY_INT_AMOUNT" 
    FROM LNMASTER LEFT OUTER JOIN
          ( SELECT "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO", COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("TRAN_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("TRAN_AMOUNT" AS FLOAT) END),0) "TRAN_AMOUNT" 
               , COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("RECPAY_INT_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS FLOAT) END),0) "RECPAY_INT_AMOUNT" 
               , COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("OTHER10_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("OTHER10_AMOUNT" AS FLOAT)  END),0) "OTHER10_AMOUNT"  
           FROM LOANTRAN WHERE CAST("TRAN_DATE" AS DATE) <= TO_DATE('.$edate.', '.$DD.')
                GROUP BY "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO" ) LOANTRAN 
                ON LNMASTER."AC_TYPE"  = LOANTRAN."TRAN_ACTYPE" AND LNMASTER."BANKACNO" =  LOANTRAN."TRAN_ACNO" LEFT OUTER JOIN
          ( SELECT "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO", COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("TRAN_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("TRAN_AMOUNT" AS FLOAT) END),0) "DAILY_AMOUNT" 
                , COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("RECPAY_INT_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS FLOAT) END),0) "DAILY_RECPAY_INT_AMOUNT"  
                , COALESCE(SUM(CASE "TRAN_DRCR"  WHEN '.$D.' THEN  CAST("OTHER10_AMOUNT" AS FLOAT)  ELSE (-1) * CAST("OTHER10_AMOUNT" AS FLOAT) END),0) "DAILY_OTHER10_AMOUNT"  
                FROM DAILYTRAN WHERE CAST("TRAN_DATE" AS DATE) <= TO_DATE('.$edate.', '.$DD.')
                AND "TRAN_STATUS" = '.$TRAN_STATUS.' GROUP BY "TRAN_ACNOTYPE", "TRAN_ACTYPE", "TRAN_ACNO"
          ) DAILYTRAN ON LNMASTER."AC_TYPE"  = DAILYTRAN."TRAN_ACTYPE" AND LNMASTER."BANKACNO" =  DAILYTRAN."TRAN_ACNO" Where
           ((CAST(LNMASTER."AC_OPDATE" AS DATE) IS NULL) OR (CAST(LNMASTER."AC_OPDATE" AS DATE) <= To_DATE('.$edate.','.$DD.')))
           AND ((CAST(LNMASTER."AC_CLOSEDT" AS DATE) IS NULL) OR (CAST(LNMASTER."AC_CLOSEDT" AS DATE) > To_DATE('.$edate.','.$DD.')))
)	 
VWTMPZLNBALANCE 
Where 
    SCHEMAST.ID = LNMASTER."AC_TYPE" 
    AND LNMASTER."AC_TYPE" = VWTMPZLNBALANCE."AC_TYPE" 
    AND LNMASTER."BANKACNO" = VWTMPZLNBALANCE."BANKACNO" 
    AND CAST(LNMASTER."AC_EXPIRE_DATE" AS DATE) <= CDATE('.$edate.')  AND "CLOSING_BALANCE" > 0 
) s 
    GROUP BY "S_APPL", "S_NAME" 
) EXP_SUMMARY
ON TOTAL_SUMMARY."S_APPL" = EXP_SUMMARY."S_APPL"
WHERE 
TOTAL_SUMMARY."S_APPL" IN('.$schemeid.') AND "EXP_CLOSING_BALANCE" IS NOT NULL';


        //  echo $query;



          
$sql =  pg_query($conn,$query);




$i = 0;

$t1 = 0;
$t2 = 0;
$t3 = 0;
$t4 = 0;
$t5 = 0;
$t6 = 0;

$OVERDUE_AMT = 0;
$OD_AC_PERCENT = 0;
$OD_AMT_PERCENT = 0;
$GOVERDUE_AMT=0;
$GTot=0;
$GTot1=0;

while($row = pg_fetch_assoc($sql))
{  
    $t1 += $row['TOTAL_NO_OF_AC'];
    $t2 += $row['TOTAL_CLOSING_BALANCE'];
    $t3 += $row['DUE_NO_OF_AC'];
    $t4 += $row['DUE_BALANCE'];
    $OVERDUE_AMT =$row['DUE_BALANCE'] + $row['EXP_CLOSING_BALANCE'];
    $GOVERDUE_AMT += $OVERDUE_AMT;
    // $t5 = $row['DUE_BALANCE'] + $row['EXP_CLOSING_BALANCE'];
    $t6 += $OD_AMT_PERCENT;


    // $GTot=$row['DUE_NO_OF_AC']*100/$row['TOTAL_NO_OF_AC'];
    // $OVERDUE_AMT = $row['DUE_BALANCE'] + $row['EXP_CLOSING_BALANCE'];
    $OD_AC_PERCENT =  $row['DUE_NO_OF_AC'] * 100 / $row['TOTAL_NO_OF_AC'];
    $GTot += $OD_AC_PERCENT;
    $OD_AMT_PERCENT = $OVERDUE_AMT * 100 /  $row['TOTAL_CLOSING_BALANCE'];
    $GTot1 +=$OD_AMT_PERCENT;
     $tmp=[
         
        // 'Date' => $date,
        // 'Branch' => $branchName_,
        // 'Bankname' => $bankName_,
        
        "Bankname"  => $bankName_,
        "branch"=>$branchName_,
        "Date"=>$date,

        'scheme' => $row['S_APPL'] . ' ' . $row['S_NAME'],
        'Acc' => $row['TOTAL_NO_OF_AC'],
        'LBal' => $row['TOTAL_CLOSING_BALANCE'],
        'AccNo' => $row['DUE_NO_OF_AC'],
        'OveAm' => $OVERDUE_AMT,
        'Over' => sprintf("%.2f", ($OD_AC_PERCENT+ 0.0)),
        'Am' => sprintf("%.2f", ($OD_AMT_PERCENT+ 0.0)),
        'A_Total' =>  $t1,
        'L_Total' =>  $t2,
        'Ac_total' =>  $t3,
        'OAmount_Total' =>  $t14,
        'OA/C_Total' => $t15,
        'OAmount_Total' => $t16,
        'Toverdue'=>$GOVERDUE_AMT,
        'GTot'=>sprintf("%.2f", ($GTot+ 0.0)),
        'GTot1'=>sprintf("%.2f", ($GTot1+ 0.0)),

    
     ];
    
    $data[$i]=$tmp;
    $i++;
    
}



ob_end_clean();

$config = ['driver'=>'array','data'=>$data];
 //print_r($data);
$report = new PHPJasperXML();
$report->load_xml_file($filename)    
    ->setDataSource($config)
    ->export('Pdf');

?> 

