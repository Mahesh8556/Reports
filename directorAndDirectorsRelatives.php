<?php

ob_start(); 
include "main.php";
require_once('dbconnect.php');

// ini_set('display_errors', '1');
// ini_set('display_startup_errors', '1');
// error_reporting(E_ALL);
use simitsdk\phpjasperxml\PHPJasperXML;

$filename = __DIR__.'/DirectorAndDirectorsRelatives.jrxml';




$data = [];
$faker = Faker\Factory::create('en_US');

// $conn = pg_connect("host=127.0.0.1 dbname=CBSBhairavnath user=postgres password=admin");


$bankName = $_GET['bankName'];
$startDate = $_GET['startDate'];
// $branch = $_GET['branch'];
// $Scheme_code = $_GET['Scheme_code'];
$acty = $_GET['actype'];
$branchName = $_GET['branchName'];
$branched =$_GET['branched'];


// echo $startDate ;
$bankName_ = str_replace("'", "", $bankName);
$startDate_ = str_replace("'", "", $startDate);
$branchName_ = str_replace("'", "", $branchName);

$DD="'DD/MM/YYYY'";
$Max="'Max'";
$Min="'Min'";
$D="'D'";
$O="'O'";
$R="'R'";
$S="'S'";
$P = "'P'";
$LN = "'LN'";
$CC = "'CC'";
$DS = "'DS'";
$TRAN_STATUS="'1'";
$DUEBAL="'DUEBAL'";
$space= "'space'";





// if($branched== '0'){
    $query='SELECT LNMASTER."AC_ACNOTYPE"  , SCHEMAST."S_NAME"  , LNMASTER."AC_TYPE"  , LNMASTER."BANKACNO"  , LNMASTER."AC_NAME"  , LNMASTER."AC_OPDATE"  , 
    LNMASTER."AC_SANCTION_AMOUNT"  , SCHEMAST."S_SHNAME"  , LNMASTER."AC_EXPIRE_DATE"  , LNMASTER."AC_DIRECTOR"  , LNMASTER."AC_PURPOSE"  , 
    LNMASTER."AC_RELATION_TYPE"  , LNMASTER."AC_REMARK"  , VWTMPZBALANCEOD."CLOSING_BALANCE" LEDGER_BALANCE  , VWTMPOVERDUE."DIRECTORMASTER"  , 
    VWTMPOVERDUE."DIRECTOR"  , VWTMPOVERDUE."DUEBALANCE" "OVERDUE_AMOUNT"  , LNMASTER."AC_INSTALLMENT"  , LNACINTRATE."INT_RATE" "AC_INTRATE"  , 
   ABS( MINMAXLEDGERBAL(CAST(SCHEMAST."S_APPL" AS CHARACTER VARYING), LNMASTER."BANKACNO", TO_CHAR(TO_DATE('.$startDate.','.$DD.'),'.$DD.'), 
    TO_CHAR(TO_DATE('.$startDate.','.$DD.'), '.$DD.'), CAST('.$Max.' AS VARCHAR))) AS MAX_LEDGER_BALANCE,ABS( MINMAXLEDGERBAL(CAST(SCHEMAST."S_APPL" AS CHARACTER 
    VARYING), LNMASTER."BANKACNO",TO_CHAR(TO_DATE('.$startDate.','.$DD.'), '.$DD.'), TO_CHAR(TO_DATE('.$startDate.','.$DD.'), '.$DD.'), 
    CAST('.$Min.' AS VARCHAR)) ) MIN_LEDGER_BALANCE FROM LNMASTER LEFT JOIN SCHEMAST ON LNMASTER."AC_ACNOTYPE" = SCHEMAST."S_ACNOTYPE" AND     
    LNMASTER."AC_TYPE"     = SCHEMAST."id", ( SELECT LNMASTER."AC_ACNOTYPE"  , LNMASTER."AC_TYPE"  , LNMASTER."BANKACNO"  , LNMASTER."AC_NO"  , 
    LNMASTER."AC_OPDATE"  , LNMASTER."AC_CLOSEDT"  , (COALESCE(CASE LNMASTER."AC_OP_CD" WHEN '.$D.' THEN CAST(LNMASTER."AC_OP_BAL" AS FLOAT) ELSE (-1) * 
    CAST(LNMASTER."AC_OP_BAL" AS FLOAT) END,0) + COALESCE(CAST(LOANTRAN."TRAN_AMOUNT" AS FLOAT), 0) + COALESCE(CAST(DAILYTRAN."DAILY_AMOUNT" AS FLOAT), 0)) 
    "CLOSING_BALANCE", (COALESCE(CASE LNMASTER."AC_OP_CD" WHEN '.$D.' THEN LNMASTER."AC_RECBLEINT_OP" ELSE (-1)          * CAST(LNMASTER."AC_RECBLEINT_OP" AS FLOAT) 
    END, 0) + COALESCE(CAST(LOANTRAN."RECPAY_INT_AMOUNT" AS FLOAT), 0) + COALESCE(CAST(DAILYTRAN."DAILY_RECPAY_INT_AMOUNT" AS FLOAT), 0) + COALESCE(CASE 
    LNMASTER."AC_OP_CD" WHEN '.$D.' THEN CAST("AC_RECBLEODUEINT_OP" AS FLOAT) ELSE (-1) * CAST(LNMASTER."AC_RECBLEODUEINT_OP" AS FLOAT) END, 0) + COALESCE(CAST( 
    LOANTRAN."OTHER10_AMOUNT" AS FLOAT), 0) + COALESCE(CAST(DAILYTRAN."DAILY_OTHER10_AMOUNT" AS FLOAT), 0)) "RECPAY_INT_AMOUNT" FROM LNMASTER LEFT OUTER JOIN ( 
    SELECT "TRAN_ACNOTYPE" , "TRAN_ACTYPE" , "TRAN_ACNO" , COALESCE(SUM(CASE "TRAN_DRCR" WHEN '.$D.' THEN CAST("TRAN_AMOUNT" AS       FLOAT) ELSE (-1) * 
    CAST("TRAN_AMOUNT" AS FLOAT) END), 0) "TRAN_AMOUNT"            , COALESCE(SUM(CASE "TRAN_DRCR" WHEN '.$D.' THEN CAST("RECPAY_INT_AMOUNT" AS FLOAT) ELSE (-1) * 
    CAST("RECPAY_INT_AMOUNT" AS FLOAT) END), 0) "RECPAY_INT_AMOUNT", COALESCE(SUM(CASE "TRAN_DRCR" WHEN '.$D.' THEN CAST("OTHER10_AMOUNT" AS    FLOAT) ELSE (-1) * 
    CAST("OTHER10_AMOUNT" AS FLOAT) END), 0) "OTHER10_AMOUNT" FROM LOANTRAN WHERE CAST("TRAN_DATE" AS DATE) <= TO_DATE('.$startDate.', '.$DD.') GROUP BY 
    "TRAN_ACNOTYPE", "TRAN_ACTYPE"  , "TRAN_ACNO") LOANTRAN ON LNMASTER."AC_TYPE"  = LOANTRAN."TRAN_ACTYPE" AND     LNMASTER."BANKACNO" = LOANTRAN."TRAN_ACNO" 
    LEFT OUTER JOIN ( SELECT "TRAN_ACNOTYPE" , "TRAN_ACTYPE" , "TRAN_ACNO" , COALESCE(SUM(CASE "TRAN_DRCR" WHEN '.$D.' THEN CAST("TRAN_AMOUNT" AS       FLOAT) ELSE 
    (-1) * CAST("TRAN_AMOUNT" AS FLOAT) END), 0) "DAILY_AMOUNT"                 , COALESCE(SUM(CASE "TRAN_DRCR" WHEN '.$D.' THEN CAST("RECPAY_INT_AMOUNT" AS FLOAT) 
    ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS FLOAT) END), 0) "DAILY_RECPAY_INT_AMOUNT", COALESCE(SUM(CASE "TRAN_DRCR" WHEN '.$D.' THEN CAST("OTHER10_AMOUNT" AS    
    FLOAT) ELSE (-1) * CAST("OTHER10_AMOUNT" AS FLOAT) END), 0) "DAILY_OTHER10_AMOUNT" FROM DAILYTRAN WHERE CAST("TRAN_DATE" AS DATE) <= TO_DATE('.$startDate.', 
    '.$DD.') AND     "TRAN_STATUS"  = '.$TRAN_STATUS.' GROUP BY "TRAN_ACNOTYPE", "TRAN_ACTYPE"  , "TRAN_ACNO") DAILYTRAN ON LNMASTER."AC_TYPE"  = 
    DAILYTRAN."TRAN_ACTYPE" AND     LNMASTER."BANKACNO" = DAILYTRAN."TRAN_ACNO" WHERE (( CAST(LNMASTER."AC_OPDATE" AS DATE) IS NULL) OR      ( 
    CAST(LNMASTER."AC_OPDATE" AS DATE) <= TO_DATE('.$startDate.','.$DD.'))) AND     (( CAST(LNMASTER."AC_CLOSEDT" AS DATE) IS NULL) OR      ( 
    CAST(LNMASTER."AC_CLOSEDT" AS DATE) > TO_DATE('.$startDate.', '.$DD.'))) ) VWTMPZBALANCEOD , 
    LNACINTRATE                                                                                                                   , ( SELECT SCHEMAST."S_APPL", 
    SCHEMAST."S_APPL" || '.$space.' || SCHEMAST."S_NAME" "SCHEME", LNMASTER."AC_ACNOTYPE"               , LNMASTER."AC_TYPE"                   , 
    LNMASTER."AC_NO"                     , LNMASTER."AC_NAME"                   , LNMASTER."BANKACNO"                  , LNMASTER."AC_OPDATE"                 , 
    LNMASTER."idmasterID"                , LNMASTER."AC_CLOSEDT"                , DIRECTORMASTER.ID ||'.$space.' || DIRECTORMASTER."NAME" "DIRECTORMASTER", 
    "AC_RECOMMEND_BY" "DIRECTOR"                     , AUTHORITYMASTER.ID || '.$space.' || AUTHORITYMASTER."NAME" "AUTHORITYMASTER", "AC_AUTHORITY" 
    "AUTHORITY"                         , RECOVERYCLEARKMASTER.ID || '.$space.' || RECOVERYCLEARKMASTER."NAME" "RECOVERYCLEARKMASTER", 
    "AC_RECOVERY_CLERK"                                          , OWNBRANCHMASTER.ID || '.$space.' || OWNBRANCHMASTER."NAME" "BRANCH", 
    LNMASTER."BRANCH_CODE"                    , CUSTOMERADDRESS."AC_CTCODE" "CITY"        , CITYMASTER."CITY_NAME" "CITYNAME"         , CUSTOMERADDRESS."AC_ADDR" 
    || '.$space.' || CUSTOMERADDRESS."AC_AREA" "ADDRESS"   , LNMASTER."AC_MORATORIUM_PERIOD"   , LNMASTER."AC_SANCTION_AMOUNT"   , LNMASTER."AC_GRACE_PERIOD"   , 
    LNMASTER."AC_REPAYMODE"   , IDMASTER."AC_MOBILENO"   , (COALESCE(CASE LNMASTER."AC_OP_CD" WHEN '.$D.' THEN CAST(LNMASTER."AC_OP_BAL" AS FLOAT) ELSE (-1) * 
    CAST(LNMASTER."AC_OP_BAL" AS FLOAT ) END,0) + COALESCE(CAST(TRANTABLE."TRAN_AMOUNT" AS FLOAT),0) ) "CLOSING_BALANCE" , (COALESCE(CASE LNMASTER."AC_OP_CD" 
    WHEN '.$D.' THEN LNMASTER."AC_RECBLEINT_OP" ELSE (-1)          * LNMASTER."AC_RECBLEINT_OP" END,0) + COALESCE(CAST(TRANTABLE."RECPAY_INT_AMOUNT" AS FLOAT),0) + 
    COALESCE(CASE LNMASTER."AC_OP_CD" WHEN '.$D.' THEN CAST(LNMASTER."AC_RECBLEODUEINT_OP" AS FLOAT) ELSE (-1) * CAST(LNMASTER."AC_RECBLEODUEINT_OP" AS FLOAT) 
    END,0) + COALESCE(CAST(TRANTABLE."OTHER10_AMOUNT" AS FLOAT),0) ) "RECPAY_INT_AMOUNT", LNMASTER."AC_INSTALLMENT"   , 
    OIRINTBALANCE(SCHEMAST."S_APPL",LNMASTER."BANKACNO",'.$startDate.',0) "OVERDUEINTEREST"   ,
    (case  when CAST (LNMASTER."AC_INSTALLMENT" as FLOAT) <> 0  then  CEIL(CAST(LNMASTER."AC_SANCTION_AMOUNT" AS 
    FLOAT)/CAST( LNMASTER."AC_INSTALLMENT" AS FLOAT))  else 0 end) "TOTALINSTALLMENTS"   , 
    (case when CAST (LNMASTER."AC_INSTALLMENT" as FLOAT) <> 0  then ceil(DueBalance(CAST(SCHEMAST."S_APPL" AS   CHARACTER VARYING),LNMASTER."BANKACNO",'.$startDate.','.$DUEBAL.',0)/ CAST( LNMASTER."AC_INSTALLMENT" AS FLOAT)) else
    0 end)
    "DUEINSTALLMENT"   , 
    (case when CAST (LNMASTER."AC_INSTALLMENT" as FLOAT) <> 0 then  ceil((CAST(LNMASTER."AC_SANCTION_AMOUNT" AS FLOAT)- DueBalance(CAST(SCHEMAST."S_APPL" AS CHARACTER VARYING),LNMASTER."BANKACNO", 
    '.$startDate.','.$DUEBAL.',0) )/CAST(LNMASTER."AC_INSTALLMENT" AS FLOAT)) else 0 end) "PAIDINSTALLMENTS"  , DueBalance(CAST(SCHEMAST."S_APPL" AS CHARACTER 
    VARYING),LNMASTER."BANKACNO",'.$startDate.','.$DUEBAL.',0) "DUEBALANCE"   , "AC_EXPIRE_DATE"   , overduedate(CAST(SCHEMAST."S_APPL" AS 
    INTEGER),LNMASTER."BANKACNO", CAST('.$startDate.' AS CHARACTER VARYING) , CAST(DueBalance(CAST( SCHEMAST."S_APPL" AS CHARACTER 
    VARYING),LNMASTER."BANKACNO",'.$startDate.','.$DUEBAL.',0) AS CHARACTER VARYING), CAST(LNMASTER."AC_INSTALLMENT" AS CHARACTER VARYING)) "OVERDUEDATE" FROM 
    LNMASTER LEFT JOIN SCHEMAST ON SCHEMAST.ID= LNMASTER."AC_TYPE" LEFT JOIN DIRECTORMASTER ON DIRECTORMASTER.ID=CAST(LNMASTER."AC_RECOMMEND_BY" AS INTEGER) LEFT 
    JOIN RECOVERYCLEARKMASTER ON RECOVERYCLEARKMASTER.ID=CAST(LNMASTER."AC_RECOVERY_CLERK" AS INTEGER) LEFT JOIN AUTHORITYMASTER ON 
    AUTHORITYMASTER.ID=LNMASTER."AC_AUTHORITY" LEFT JOIN OWNBRANCHMASTER ON OWNBRANCHMASTER.ID=LNMASTER."BRANCH_CODE" LEFT JOIN CUSTOMERADDRESS ON 
    CUSTOMERADDRESS."idmasterID" =LNMASTER."idmasterID" AND     CUSTOMERADDRESS."AC_ADDTYPE" ='.$P.' LEFT JOIN CITYMASTER ON CITYMASTER.ID= 
    CUSTOMERADDRESS."AC_CTCODE" LEFT JOIN IDMASTER ON IDMASTER.ID=LNMASTER."idmasterID", ( SELECT "TRAN_ACNOTYPE" , "TRAN_ACTYPE" , "TRAN_ACNO" , 
    COALESCE(SUM(COALESCE(CAST("TRAN_AMOUNT" AS       FLOAT),0) + COALESCE("DAILY_AMOUNT",0)),0) "TRAN_AMOUNT" , COALESCE(SUM(COALESCE(CAST("RECPAY_INT_AMOUNT" 
    AS FLOAT),0) + COALESCE("DAILY_RECPAY_INT_AMOUNT",0)),0) "RECPAY_INT_AMOUNT", COALESCE(SUM(COALESCE(CAST("OTHER10_AMOUNT" AS    FLOAT),0) + 
    COALESCE("DAILY_OTHER10_AMOUNT",0)),0) "OTHER10_AMOUNT" FROM ( SELECT * FROM ( SELECT "TRAN_ACNOTYPE" , "TRAN_ACTYPE" , "TRAN_ACNO" , COALESCE(SUM(CASE 
    "TRAN_DRCR" WHEN '.$D.' THEN CAST("TRAN_AMOUNT" AS       FLOAT) ELSE (-1) * CAST("TRAN_AMOUNT" AS FLOAT) END),0) "TRAN_AMOUNT"             , COALESCE(SUM(CASE 
    "TRAN_DRCR" WHEN '.$D.' THEN CAST("RECPAY_INT_AMOUNT" AS FLOAT) ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS FLOAT) END),0) "RECPAY_INT_AMOUNT" , COALESCE(SUM(CASE 
    "TRAN_DRCR" WHEN '.$D.' THEN CAST ("OTHER10_AMOUNT" AS   FLOAT) ELSE (-1) * CAST ("OTHER10_AMOUNT" AS FLOAT) END),0) "OTHER10_AMOUNT"      , 0 "DAILY_AMOUNT",0 
    "DAILY_RECPAY_INT_AMOUNT",0 "DAILY_OTHER10_AMOUNT" FROM LOANTRAN WHERE CAST("TRAN_DATE" AS DATE) <= TO_DATE('.$startDate.', '.$DD.') AND     
    "TRAN_ACNOTYPE" IN ('.$LN.','.$CC.','.$DS.') GROUP BY "TRAN_ACNOTYPE", "TRAN_ACTYPE"  , "TRAN_ACNO"  UNION ALL  SELECT "TRAN_ACNOTYPE" , "TRAN_ACTYPE" , "TRAN_ACNO" 
    , COALESCE(SUM(CASE "TRAN_DRCR" WHEN '.$D.' THEN CAST("TRAN_AMOUNT" AS       FLOAT) ELSE (-1) * CAST("TRAN_AMOUNT" AS FLOAT) END),0) 
    "DAILY_AMOUNT"                  , COALESCE(SUM(CASE "TRAN_DRCR" WHEN '.$D.' THEN CAST("RECPAY_INT_AMOUNT" AS FLOAT) ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS 
    FLOAT) END),0) "DAILY_RECPAY_INT_AMOUNT" , COALESCE(SUM(CASE "TRAN_DRCR" WHEN '.$D.' THEN CAST ("OTHER10_AMOUNT" AS   FLOAT) ELSE (-1) * CAST ("OTHER10_AMOUNT" 
    AS FLOAT) END),0) "DAILY_OTHER10_AMOUNT"      , 0 "TRAN_AMOUNT" , 0 "RECPAY_INT_AMOUNT" , 0 "OTHER10_AMOUNT" FROM DAILYTRAN WHERE CAST("TRAN_DATE" AS DATE) 
    <= TO_DATE('.$startDate.', '.$DD.') AND     "TRAN_STATUS"              = '.$TRAN_STATUS.' AND     "TRAN_ACNOTYPE" IN ('.$LN.','.$CC.','.$DS.') GROUP BY "TRAN_ACNOTYPE", 
    "TRAN_ACTYPE"  , "TRAN_ACNO") RS ORDER BY "TRAN_ACNOTYPE", "TRAN_ACTYPE"  , "TRAN_ACNO")AMOUNT GROUP BY "TRAN_ACNOTYPE", "TRAN_ACTYPE"  , "TRAN_ACNO" ) 
    TRANTABLE WHERE LNMASTER."AC_ACNOTYPE" = TRANTABLE."TRAN_ACNOTYPE" AND     LNMASTER."AC_TYPE"     = CAST(TRANTABLE."TRAN_ACTYPE" AS INTEGER) AND     
    LNMASTER."BANKACNO"    = TRANTABLE."TRAN_ACNO" AND     LNMASTER."status"                  =1 AND     
    LNMASTER."SYSCHNG_LOGIN" IS NOT NULL ORDER BY SCHEMAST."S_APPL", LNMASTER."BANKACNO" ) VWTMPOVERDUE WHERE LNMASTER."AC_ACNOTYPE" = 
    VWTMPZBALANCEOD."AC_ACNOTYPE" AND     LNMASTER."AC_TYPE"     = VWTMPZBALANCEOD."AC_TYPE" AND     LNMASTER."BANKACNO"    = VWTMPZBALANCEOD."BANKACNO" AND     
    LNMASTER."AC_TYPE"     = VWTMPOVERDUE."AC_TYPE" AND     LNMASTER."BANKACNO"    = VWTMPOVERDUE."BANKACNO" AND     LNMASTER."AC_RELATION_TYPE" IN ('.$O.','.$D.','.$R.','.$S.') AND
         (( CAST(LNMASTER."AC_OPDATE" AS DATE) IS NULL) OR      ( CAST(LNMASTER."AC_OPDATE" AS DATE) <= TO_DATE('.$startDate.','.$DD.'))) AND     
    (( CAST(LNMASTER."AC_CLOSEDT" AS DATE) IS NULL) OR      ( CAST(LNMASTER."AC_CLOSEDT" AS DATE) > TO_DATE('.$startDate.','.$DD.'))) AND     
    LNMASTER."BANKACNO"=LNACINTRATE."BANKACNO" AND     LNMASTER."AC_TYPE" IN('.$acty.')  AND     LNMASTER."AC_RECOMMEND_BY" =1
    ';
    // echo $query;          
$sql =  pg_query($conn,$query);




$i = 0;

$t=0;
$t1=0;
$gt=0;
$gt1=0;

while($row = pg_fetch_assoc($sql))
{  
    $t = $t + $row['AC_SANCTION_AMOUNT'];
    $t1 = $t1 + $row['ledger_balance'];

    // $gt = $gt + $t;
    // $gt1 = $gt1 + $t1;


     $tmp=[
         'date' => $startDate_, 
        'bank' => $bankName_,
        'branch' => $branchName_,
        'Director' => $row['AC_DIRECTOR'],
        'Scheme' =>  $row['AC_ACNOTYPE'],
        'Scheme_Name' =>  $row['S_NAME'],
        'Ac_No' => $row['BANKACNO'],
        'Ac_Name' =>$row['AC_NAME'],
        'Relation' =>$row['AC_RELATION_TYPE'],
        'San_Amt' =>$row['AC_SANCTION_AMOUNT'],
        'Start_Date' =>$row['AC_OPDATE'],
        'Purpose' =>$row['AC_PURPOSE'],
        'Exp_Date' =>$row['AC_EXPIRE_DATE'],
        'Ac_Bal' =>$row['ledger_balance'],
        'odamt' => $row['OVERDUE_AMOUNT'],
        'High_Acbal' =>$row['max_ledger_balance'],
        'Min_Acbal' =>$row['min_ledger_balance'],
        'int_rate' => $row['AC_INTRATE'],
        'remark' => $row['AC_REMARK'],
        'DT_San' =>sprintf("%.2f", ($t+ 0.0)),
        'DT_Acbal' => sprintf("%.2f", ($t1+ 0.0)),
        // 'Total_San' => sprintf("%.2f", ($gt+ 0.0)),
        // 'Total_Acbal' => sprintf("%.2f", ($gt1+ 0.0)),
'O'=>"Other",


       
     ];
    
    $data[$i]=$tmp;
    $i++;
    
}



ob_end_clean();

$config = ['driver'=>'array','data'=>$data];
 //print_r($data);
$report = new PHPJasperXML();
$report->load_xml_file($filename)    
    ->setDataSource($config)
    ->export('Pdf');

?> 

