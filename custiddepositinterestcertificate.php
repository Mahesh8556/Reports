<?php
 ob_start();
include "main.php";
require_once('dbconnect.php');


// ini_set('display_errors', '1');
// ini_set('display_startup_errors', '1');
// error_reporting(E_ALL);
//error_reporting(0);
use simitsdk\phpjasperxml\PHPJasperXML;

$filename = __DIR__.'/custiddepositinterestcertificate.jrxml';

$data = [];
//$row = [];
//$faker = Faker\Factandy::create('en_US');

$datefandmate = "'DD/MM/YYYY'";

$stdate = $_GET['stdate'];
$branchName = $_GET['branchName'];
$branch_code = $_GET['branch_code'];
$etdate = $_GET['etdate'];
$branch = $_GET['branch'];
$AC_CUSTID = $_GET['AC_CUSTID'];
$FLAG1 = $_GET['FLAG1'];
$bankName = $_GET['bankName'];
$var="'C' ";
$var1="'D' ";
$AC_ACNOTYPE="'TD'";
// $AC_CUSTID = "'9'";
$zero = "'0'";
$tran_status = "'1'";
$status='1';
// $var3="'DP'";
// $var4="'NULL'";


$bankName = str_replace("'", "", $bankName);
$stdate_ = str_replace("'", "", $stdate);
$etdate_ = str_replace("'", "", $etdate);
$branchName = str_replace("'", "", $branchName);

$query = '';
if($FLAG1 == 1) 
{$query .= 'SELECT DPMASTER."AC_ACNOTYPE",
	DPMASTER."AC_TYPE",
	DPMASTER."BANKACNO",
	DPMASTER."AC_NAME",
	IDMASTER."AC_PANNO",
	CUSTOMERADDRESS."AC_ADDR",
	TDSTRAN."TDS_AMOUNT",
	DPMASTER."AC_CUSTID",
	"AC_REF_RECEIPTNO",
	SCHEMAST."S_NAME",
	DPMASTER."AC_CLOSEDT",
	DPMASTER."AC_OPDATE",
	CASE CAST(SCHEMAST."S_INSTTYPE" AS INTEGER)
WHEN 0 THEN CAST(DPMASTER."AC_SCHMAMT" AS INTEGER)ELSE 0
	END "AC_SCHMAMT",
	(COALESCE(DEPOTRAN.INTEREST_PAID_AMOUNT,
			0) + COALESCE(DAILYTRAN.DAILY_INTEREST_PAID_AMOUNT,
0) + COALESCE(INTERESTTRAN.INT_INTEREST_PAID_AMOUNT,
0)) INTEREST_PAID_AMOUNT,
	COALESCE(CAST(LEDGERRECPAYINTBALANCE(SCHEMAST."S_APPL",
CAST(DPMASTER."BANKACNO" AS CHARACTER VARYING),
CAST('.$etdate.' AS CHARACTER VARYING),
0)AS FLOAT),
		0) PAYABLE_INTEREST,
	CASE COALESCE(VWTMPOPBALANCE.CLOSING_BALANCE,0)
					WHEN 0 THEN CAST(LEDGERBALANCE(CAST(SCHEMAST."S_APPL" AS CHARACTER VARYING),
CAST(DPMASTER."BANKACNO" AS CHARACTER VARYING),
CAST(DPMASTER."AC_OPDATE" AS CHARACTER VARYING),-1,1) AS FLOAT)
					ELSE COALESCE(VWTMPOPBALANCE.CLOSING_BALANCE,0)
	END OPBALANCE,
	
	CASE COALESCE(VWTMPCLBALANCE.CLOSING_BALANCE,0)
	WHEN 0 THEN
	 CAST(LEDGERBALANCE(CAST(SCHEMAST."S_APPL" AS CHARACTER VARYING),
CAST(DPMASTER."BANKACNO" AS CHARACTER VARYING),
'.$etdate.',1,	1) AS FLOAT)
ELSE  COALESCE(VWTMPCLBALANCE.CLOSING_BALANCE,1) END CLBALANCE

FROM DPMASTER
LEFT OUTER JOIN
	(SELECT "TRAN_ACNOTYPE",
			"TRAN_ACTYPE",
			"TRAN_ACNO",
			(COALESCE(SUM(CASE DEPOTRAN."TRAN_DRCR"
WHEN '.$var1.' THEN CAST(DEPOTRAN."INTEREST_AMOUNT" AS FLOAT)
ELSE 0 END),0) + COALESCE(SUM(CASE DEPOTRAN."TRAN_DRCR"
WHEN '.$var.' THEN CAST(DEPOTRAN."TRAN_AMOUNT" AS FLOAT) ELSE 0 END),
0) + COALESCE(SUM(CASE DEPOTRAN."TRAN_DRCR"
WHEN '.$var1.' THEN DEPOTRAN."RECPAY_INT_AMOUNT" ELSE 0 END),
0)) INTEREST_PAID_AMOUNT,
			0 PAYABLE_INTEREST
		FROM DPMASTER
		INNER JOIN DEPOTRAN ON DPMASTER."BANKACNO" = DEPOTRAN."TRAN_ACNO"
		WHERE DPMASTER."AC_ACNOTYPE" = DEPOTRAN."TRAN_ACNOTYPE"
			AND DPMASTER."AC_TYPE" = CAST(DEPOTRAN."TRAN_ACTYPE" AS INTEGER)
	 AND DPMASTER."BRANCH_CODE"='.$branch_code.'
			AND ((DEPOTRAN."IS_INTEREST_ENTRY" <> 0
AND ((CAST("TRAN_DATE" AS DATE) = CAST("AC_CLOSEDT" AS DATE)
AND CAST("AC_CLOSEDT" AS DATE) >= CAST('.$stdate.'AS DATE)
AND CAST("AC_CLOSEDT" AS DATE) <= CAST('.$etdate.'AS DATE))
OR (CAST("TRAN_DATE" AS DATE) >= CAST('.$stdate.'AS DATE)
AND CAST("TRAN_DATE" AS DATE) <= CAST('.$etdate.'AS DATE))))
OR ((CAST("TRAN_DATE" AS DATE) = CAST("AC_CLOSEDT" AS DATE)
AND CAST("AC_CLOSEDT" AS DATE) >= CAST('.$stdate.'AS DATE)
AND CAST("AC_CLOSEDT" AS DATE) <= CAST('.$etdate.'AS DATE))
OR (CAST("TRAN_DATE" AS DATE) >= CAST('.$stdate.'AS DATE)
AND CAST("TRAN_DATE" AS DATE) <= CAST('.$etdate.' AS DATE)
AND "TRAN_DRCR" = '.$var1.')))
		GROUP BY "TRAN_ACNOTYPE",
			"TRAN_ACTYPE",
			"TRAN_ACNO") DEPOTRAN ON DPMASTER."BANKACNO" = DEPOTRAN."TRAN_ACNO"
LEFT OUTER JOIN
	(SELECT "TRAN_ACNOTYPE",
			"TRAN_ACTYPE",
			"TRAN_ACNO",
			(COALESCE(SUM(CASE DAILYTRAN."TRAN_DRCR"
WHEN '.$var1.' THEN CAST(DAILYTRAN."INTEREST_AMOUNT" AS FLOAT) ELSE 0 END),
0) + COALESCE(SUM(CASE DAILYTRAN."TRAN_DRCR"
WHEN '.$var.' THEN CAST(DAILYTRAN."TRAN_AMOUNT" AS FLOAT) ELSE 0 END),
0) + COALESCE(SUM(CASE DAILYTRAN."TRAN_DRCR"
WHEN '.$var1.' THEN CAST(DAILYTRAN."RECPAY_INT_AMOUNT" AS FLOAT)
ELSE 0 END),
0)) DAILY_INTEREST_PAID_AMOUNT,
			0 DAILY_PAYABLE_INTEREST
		FROM DAILYTRAN
		WHERE CAST("TRAN_STATUS" AS INTEGER) = '.$tran_status.'
			AND CAST("TRAN_DATE" AS DATE) >= CAST('.$stdate.'AS date)
			AND CAST("TRAN_DATE" AS DATE) <= CAST('.$etdate.'AS date)
	 AND "BRANCH_CODE"='.$branch_code.'
		GROUP BY "TRAN_ACNOTYPE",
			"TRAN_ACTYPE",
			"TRAN_ACNO") DAILYTRAN ON DPMASTER."BANKACNO" = DAILYTRAN."TRAN_ACNO"
LEFT OUTER JOIN
	(SELECT "TRAN_ACNOTYPE",
			"TRAN_ACTYPE",
			"TRAN_ACNO",
			(COALESCE(SUM(CASE INTERESTTRAN."TRAN_DRCR"
WHEN '.$var1.' THEN INTERESTTRAN."INTEREST_AMOUNT" ELSE 0 END),
0) + COALESCE(SUM(CASE INTERESTTRAN."TRAN_DRCR"
WHEN '.$var.' THEN INTERESTTRAN."TRAN_AMOUNT" ELSE 0 END),
0) + COALESCE(SUM(CASE INTERESTTRAN."TRAN_DRCR"
WHEN '.$var1.' THEN INTERESTTRAN."RECPAY_INT_AMOUNT"
ELSE 0 END), 0)) INT_INTEREST_PAID_AMOUNT,
			0 INT_INTEREST_PAYABLE_INTEREST
		FROM INTERESTTRAN
		WHERE CAST("TRAN_STATUS" AS INTEGER) = '.$tran_status.'
			AND CAST("TRAN_DATE" AS date) >= CAST('.$stdate.'AS date)
			AND CAST("TRAN_DATE" AS DATE) <= CAST('.$etdate.'AS date)
	 AND "BRANCH_CODE"='.$branch_code.'
		GROUP BY "TRAN_ACNOTYPE",
			"TRAN_ACTYPE",
			"TRAN_ACNO") INTERESTTRAN ON DPMASTER."BANKACNO" = INTERESTTRAN."TRAN_ACNO"
LEFT OUTER JOIN
	(SELECT "AC_ACNOTYPE",
			"AC_TYPE",
			"AC_NO",
	        "BANKACNO",
			"AC_OPDATE",
			"AC_CLOSEDT",
			(COALESCE(CASE "AC_OP_CD"
WHEN '.$var1.' THEN CAST("AC_OP_BAL" AS FLOAT)
ELSE (-1) * CAST("AC_OP_BAL" AS FLOAT)
END, 0) + COALESCE(DEPOTRAN.TRAN_AMOUNT,
0) + COALESCE(DAILYTRAN.DAILY_AMOUNT,
0)) CLOSING_BALANCE,
			(COALESCE(CASE DPMASTER."AC_OP_CD"
WHEN '.$var1.' THEN CAST(DPMASTER."AC_PAYBLEINT_OP" AS FLOAT)
ELSE (-1) * CAST(DPMASTER."AC_PAYBLEINT_OP" AS FLOAT) END,
0) + COALESCE(DEPOTRAN."RECPAY_INT_AMOUNT",
0) + COALESCE(DAILYTRAN.RECPAY_INT_AMOUNT,
0)) RECPAY_INT_AMOUNT
		FROM DPMASTER
		LEFT OUTER JOIN
			(SELECT "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO",
					COALESCE(SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("TRAN_AMOUNT" AS float)
ELSE (-1) * CAST("TRAN_AMOUNT" AS float) END), 0) TRAN_AMOUNT,
					SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN "RECPAY_INT_AMOUNT"
ELSE (-1) * "RECPAY_INT_AMOUNT"
END) "RECPAY_INT_AMOUNT"
				FROM DEPOTRAN
				WHERE CAST("TRAN_DATE" AS date) <= CAST('.$etdate.'AS date)
			 AND "BRANCH_CODE"='.$branch_code.'
				GROUP BY "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO")DEPOTRAN ON DPMASTER."BANKACNO" = DEPOTRAN."TRAN_ACNO"
		LEFT OUTER JOIN
			(SELECT "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO",
					CAST("TRAN_STATUS" AS INTEGER),
					"TRAN_DATE",
					COALESCE(SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("TRAN_AMOUNT" AS FLOAT)
ELSE (-1) * CAST("TRAN_AMOUNT" AS FLOAT)
END), 0) DAILY_AMOUNT,
SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("RECPAY_INT_AMOUNT" AS FLOAT)
ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS FLOAT)
END) RECPAY_INT_AMOUNT
				FROM DAILYTRAN
				WHERE CAST("TRAN_DATE" AS DATE) <= CAST('.$etdate.'AS DATE)
					AND CAST("TRAN_STATUS" AS INTEGER) = '.$tran_status.'
			 AND "BRANCH_CODE"='.$branch_code.'
				GROUP BY "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO",
					"TRAN_DATE",
					CAST("TRAN_STATUS" AS INTEGER)) DAILYTRAN ON DPMASTER."BANKACNO" = DAILYTRAN."TRAN_ACNO"
		WHERE DPMASTER."AC_ACNOTYPE" = DEPOTRAN."TRAN_ACNOTYPE"
			AND DPMASTER."AC_TYPE" = CAST(DEPOTRAN."TRAN_ACTYPE" AS INTEGER)
			AND DPMASTER."AC_ACNOTYPE" = DAILYTRAN."TRAN_ACNOTYPE"
			AND DPMASTER."AC_TYPE" = CAST(DAILYTRAN."TRAN_ACTYPE" AS INTEGER)
			AND (DPMASTER."AC_OPDATE" IS NULL
			OR CAST(DPMASTER."AC_OPDATE" AS DATE) <= CAST('.$etdate.' AS DATE))
			AND (CAST(DPMASTER."AC_CLOSEDT" AS DATE) IS NULL
			OR CAST(DPMASTER."AC_CLOSEDT" AS DATE) > CAST('.$stdate.'AS DATE))
	 AND DPMASTER."BRANCH_CODE"='.$branch_code.' AND DPMASTER.STATUS=1 AND DPMASTER."SYSCHNG_LOGIN" IS NOT NULL
	)VWTMPOPBALANCE ON DPMASTER."BANKACNO"  = VWTMPOPBALANCE."BANKACNO" 
LEFT OUTER JOIN
	(SELECT "AC_ACNOTYPE",
			"AC_TYPE",
	        "AC_NO",
			"BANKACNO",
			"AC_OPDATE",
			"AC_CLOSEDT",
			(COALESCE(CASE "AC_OP_CD"
WHEN '.$var1.' THEN CAST("AC_OP_BAL" AS FLOAT)
ELSE (-1) * CAST("AC_OP_BAL" AS FLOAT)
END,0) + COALESCE(DEPOTRAN.TRAN_AMOUNT,
0) + COALESCE(DAILYTRAN.DAILY_AMOUNT,
0)) CLOSING_BALANCE,
			(COALESCE(CASE DPMASTER."AC_OP_CD"
WHEN '.$var1.' THEN CAST(DPMASTER."AC_PAYBLEINT_OP" AS FLOAT)
ELSE (-1) * CAST(DPMASTER."AC_PAYBLEINT_OP" AS FLOAT)
END,0) + COALESCE(DEPOTRAN."RECPAY_INT_AMOUNT",
0) + COALESCE(DAILYTRAN.RECPAY_INT_AMOUNT,
0)) RECPAY_INT_AMOUNT
		FROM DPMASTER
		LEFT OUTER JOIN
			(SELECT "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO",
					COALESCE(SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("TRAN_AMOUNT" AS float)
ELSE (-1) * CAST("TRAN_AMOUNT" AS float) END),0) TRAN_AMOUNT,
					SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("RECPAY_INT_AMOUNT" AS float)
ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS float)
END) "RECPAY_INT_AMOUNT"
				FROM DEPOTRAN
				WHERE CAST("TRAN_DATE" AS date) <= CAST('.$etdate.'AS date)
			 AND "BRANCH_CODE"='.$branch_code.'
				GROUP BY "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO") DEPOTRAN ON DPMASTER."BANKACNO" = DEPOTRAN."TRAN_ACNO"
		LEFT OUTER JOIN
			(SELECT "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO",
					COALESCE(SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("TRAN_AMOUNT" AS float)
ELSE (-1) * CAST("TRAN_AMOUNT" AS float) END), 0) DAILY_AMOUNT,
					SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("RECPAY_INT_AMOUNT" AS float)
ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS float)
END) RECPAY_INT_AMOUNT
				FROM DAILYTRAN
				WHERE CAST("TRAN_DATE" AS date) <= CAST('.$etdate.' AS date)
					AND CAST("TRAN_STATUS" AS INTEGER) = '.$tran_status.'
			 AND "BRANCH_CODE"='.$branch_code.'
				GROUP BY "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO") DAILYTRAN ON DPMASTER."BANKACNO" = DAILYTRAN."TRAN_ACNO"
		WHERE DPMASTER."AC_ACNOTYPE" = DEPOTRAN."TRAN_ACNOTYPE"
			AND DPMASTER."AC_TYPE" = CAST(DEPOTRAN."TRAN_ACTYPE" AS INTEGER)
			AND DPMASTER."AC_ACNOTYPE" = DAILYTRAN."TRAN_ACNOTYPE"
			AND DPMASTER."AC_TYPE" = CAST(DAILYTRAN."TRAN_ACTYPE" AS INTEGER)
			AND (DPMASTER."AC_OPDATE" IS NULL
			OR CAST(DPMASTER."AC_OPDATE" AS DATE) <= CAST('.$etdate.' AS DATE))
			AND (DPMASTER."AC_CLOSEDT" IS NULL
			OR CAST(DPMASTER."AC_CLOSEDT" AS DATE) > CAST('.$stdate.'AS DATE))
	 AND DPMASTER."BRANCH_CODE"='.$branch_code.' AND DPMASTER.STATUS='.$status.' AND DPMASTER."SYSCHNG_LOGIN" IS NOT NULL
	)VWTMPCLBALANCE ON DPMASTER."BANKACNO"  = VWTMPCLBALANCE."BANKACNO" 
LEFT OUTER JOIN SCHEMAST ON DPMASTER."AC_TYPE" = SCHEMAST."id"
LEFT OUTER JOIN CUSTOMERADDRESS ON CUSTOMERADDRESS."idmasterID" = DPMASTER."AC_CUSTID"
LEFT OUTER JOIN IDMASTER ON IDMASTER.ID = DPMASTER."idmasterID"
LEFT OUTER JOIN TDSTRAN ON TDSTRAN."AC_NO" = DPMASTER."BANKACNO"
WHERE DPMASTER."AC_CLOSEDT" IS NOT NULL
	AND DPMASTER."AC_CUSTID" = '.$AC_CUSTID.'
	AND (COALESCE(INTEREST_PAID_AMOUNT,0) + COALESCE(PAYABLE_INTEREST,
0) <> 0)
	AND DPMASTER."AC_ACNOTYPE" = '.$AC_ACNOTYPE.'
order by "AC_OPDATE","BANKACNO"';
}

else
{$query .='SELECT DPMASTER."AC_ACNOTYPE",
	DPMASTER."AC_TYPE",
	DPMASTER."BANKACNO",
	DPMASTER."AC_NAME",
	IDMASTER."AC_PANNO",
	CUSTOMERADDRESS."AC_ADDR",
	TDSTRAN."TDS_AMOUNT",
	DPMASTER."AC_CUSTID",
	SCHEMAST."S_NAME",
	"AC_REF_RECEIPTNO",
	DPMASTER."AC_CLOSEDT",
	DPMASTER."AC_OPDATE",
	CASE CAST(SCHEMAST."S_INSTTYPE" AS INTEGER)
WHEN 0 THEN CAST(DPMASTER."AC_SCHMAMT" AS INTEGER)ELSE 0
	END "AC_SCHMAMT",
	(COALESCE(DEPOTRAN.INTEREST_PAID_AMOUNT,
			0) + COALESCE(DAILYTRAN.DAILY_INTEREST_PAID_AMOUNT,
0) + COALESCE(INTERESTTRAN.INT_INTEREST_PAID_AMOUNT,
0)) INTEREST_PAID_AMOUNT,
	COALESCE(CAST(LEDGERRECPAYINTBALANCE(SCHEMAST."S_APPL",
CAST(DPMASTER."BANKACNO" AS CHARACTER VARYING),
CAST('.$etdate.' AS CHARACTER VARYING),
0)AS FLOAT),
		0) PAYABLE_INTEREST,
	CASE COALESCE(VWTMPOPBALANCE.CLOSING_BALANCE,0)
					WHEN 0 THEN CAST(LEDGERBALANCE(CAST(SCHEMAST."S_APPL" AS CHARACTER VARYING),
CAST(DPMASTER."BANKACNO" AS CHARACTER VARYING),
CAST(DPMASTER."AC_OPDATE" AS CHARACTER VARYING),-1,1) AS FLOAT)
					ELSE COALESCE(VWTMPOPBALANCE.CLOSING_BALANCE,0)
	END OPBALANCE,
	
	CASE COALESCE(VWTMPCLBALANCE.CLOSING_BALANCE,0)
	WHEN 0 THEN
	 CAST(LEDGERBALANCE(CAST(SCHEMAST."S_APPL" AS CHARACTER VARYING),
CAST(DPMASTER."BANKACNO" AS CHARACTER VARYING),
'.$etdate.',1,	1) AS FLOAT)
ELSE  COALESCE(VWTMPCLBALANCE.CLOSING_BALANCE,1) END CLBALANCE

FROM DPMASTER
LEFT OUTER JOIN
	(SELECT "TRAN_ACNOTYPE",
			"TRAN_ACTYPE",
			"TRAN_ACNO",
			(COALESCE(SUM(CASE DEPOTRAN."TRAN_DRCR"
WHEN '.$var1.' THEN CAST(DEPOTRAN."INTEREST_AMOUNT" AS FLOAT)
ELSE 0 END),0) + COALESCE(SUM(CASE DEPOTRAN."TRAN_DRCR"
WHEN '.$var.' THEN CAST(DEPOTRAN."TRAN_AMOUNT" AS FLOAT) ELSE 0 END),
0) + COALESCE(SUM(CASE DEPOTRAN."TRAN_DRCR"
WHEN '.$var1.' THEN DEPOTRAN."RECPAY_INT_AMOUNT" ELSE 0 END),
0)) INTEREST_PAID_AMOUNT,
			0 PAYABLE_INTEREST
		FROM DPMASTER
		INNER JOIN DEPOTRAN ON DPMASTER."BANKACNO" = DEPOTRAN."TRAN_ACNO"
		WHERE DPMASTER."AC_ACNOTYPE" = DEPOTRAN."TRAN_ACNOTYPE"
			AND DPMASTER."AC_TYPE" = CAST(DEPOTRAN."TRAN_ACTYPE" AS INTEGER)
	 AND DPMASTER."BRANCH_CODE"='.$branch_code.'
			AND ((DEPOTRAN."IS_INTEREST_ENTRY" <> 0
AND ((CAST("TRAN_DATE" AS DATE) = CAST("AC_CLOSEDT" AS DATE)
AND CAST("AC_CLOSEDT" AS DATE) >= CAST('.$stdate.'AS DATE)
AND CAST("AC_CLOSEDT" AS DATE) <= CAST('.$etdate.'AS DATE))
OR (CAST("TRAN_DATE" AS DATE) >= CAST('.$stdate.'AS DATE)
AND CAST("TRAN_DATE" AS DATE) <= CAST('.$etdate.'AS DATE))))
OR ((CAST("TRAN_DATE" AS DATE) = CAST("AC_CLOSEDT" AS DATE)
AND CAST("AC_CLOSEDT" AS DATE) >= CAST('.$stdate.'AS DATE)
AND CAST("AC_CLOSEDT" AS DATE) <= CAST('.$etdate.'AS DATE))
OR (CAST("TRAN_DATE" AS DATE) >= CAST('.$stdate.'AS DATE)
AND CAST("TRAN_DATE" AS DATE) <= CAST('.$etdate.' AS DATE)
AND "TRAN_DRCR" = '.$var1.')))
		GROUP BY "TRAN_ACNOTYPE",
			"TRAN_ACTYPE",
			"TRAN_ACNO") DEPOTRAN ON DPMASTER."BANKACNO" = DEPOTRAN."TRAN_ACNO"
LEFT OUTER JOIN
	(SELECT "TRAN_ACNOTYPE",
			"TRAN_ACTYPE",
			"TRAN_ACNO",
			(COALESCE(SUM(CASE DAILYTRAN."TRAN_DRCR"
WHEN '.$var1.' THEN CAST(DAILYTRAN."INTEREST_AMOUNT" AS FLOAT) ELSE 0 END),
0) + COALESCE(SUM(CASE DAILYTRAN."TRAN_DRCR"
WHEN '.$var.' THEN CAST(DAILYTRAN."TRAN_AMOUNT" AS FLOAT) ELSE 0 END),
0) + COALESCE(SUM(CASE DAILYTRAN."TRAN_DRCR"
WHEN '.$var1.' THEN CAST(DAILYTRAN."RECPAY_INT_AMOUNT" AS FLOAT)
ELSE 0 END),
0)) DAILY_INTEREST_PAID_AMOUNT,
			0 DAILY_PAYABLE_INTEREST
		FROM DAILYTRAN
		WHERE CAST("TRAN_STATUS" AS INTEGER) = '.$tran_status.'
			AND CAST("TRAN_DATE" AS DATE) >= CAST('.$stdate.'AS date)
			AND CAST("TRAN_DATE" AS DATE) <= CAST('.$etdate.'AS date)
	 AND "BRANCH_CODE"='.$branch_code.'
		GROUP BY "TRAN_ACNOTYPE",
			"TRAN_ACTYPE",
			"TRAN_ACNO") DAILYTRAN ON DPMASTER."BANKACNO" = DAILYTRAN."TRAN_ACNO"
LEFT OUTER JOIN
	(SELECT "TRAN_ACNOTYPE",
			"TRAN_ACTYPE",
			"TRAN_ACNO",
			(COALESCE(SUM(CASE INTERESTTRAN."TRAN_DRCR"
WHEN '.$var1.' THEN INTERESTTRAN."INTEREST_AMOUNT" ELSE 0 END),
0) + COALESCE(SUM(CASE INTERESTTRAN."TRAN_DRCR"
WHEN '.$var.' THEN INTERESTTRAN."TRAN_AMOUNT" ELSE 0 END),
0) + COALESCE(SUM(CASE INTERESTTRAN."TRAN_DRCR"
WHEN '.$var1.' THEN INTERESTTRAN."RECPAY_INT_AMOUNT"
ELSE 0 END), 0)) INT_INTEREST_PAID_AMOUNT,
			0 INT_INTEREST_PAYABLE_INTEREST
		FROM INTERESTTRAN
		WHERE CAST("TRAN_STATUS" AS INTEGER) = '.$tran_status.'
			AND CAST("TRAN_DATE" AS date) >= CAST('.$stdate.'AS date)
			AND CAST("TRAN_DATE" AS DATE) <= CAST('.$etdate.'AS date)
	 AND "BRANCH_CODE"='.$branch_code.'
		GROUP BY "TRAN_ACNOTYPE",
			"TRAN_ACTYPE",
			"TRAN_ACNO") INTERESTTRAN ON DPMASTER."BANKACNO" = INTERESTTRAN."TRAN_ACNO"
LEFT OUTER JOIN
	(SELECT "AC_ACNOTYPE",
			"AC_TYPE",
			"AC_NO",
	        "BANKACNO",
			"AC_OPDATE",
			"AC_CLOSEDT",
			(COALESCE(CASE "AC_OP_CD"
WHEN '.$var1.' THEN CAST("AC_OP_BAL" AS FLOAT)
ELSE (-1) * CAST("AC_OP_BAL" AS FLOAT)
END, 0) + COALESCE(DEPOTRAN.TRAN_AMOUNT,
0) + COALESCE(DAILYTRAN.DAILY_AMOUNT,
0)) CLOSING_BALANCE,
			(COALESCE(CASE DPMASTER."AC_OP_CD"
WHEN '.$var1.' THEN CAST(DPMASTER."AC_PAYBLEINT_OP" AS FLOAT)
ELSE (-1) * CAST(DPMASTER."AC_PAYBLEINT_OP" AS FLOAT) END,
0) + COALESCE(DEPOTRAN."RECPAY_INT_AMOUNT",
0) + COALESCE(DAILYTRAN.RECPAY_INT_AMOUNT,
0)) RECPAY_INT_AMOUNT
		FROM DPMASTER
		LEFT OUTER JOIN
			(SELECT "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO",
					COALESCE(SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("TRAN_AMOUNT" AS float)
ELSE (-1) * CAST("TRAN_AMOUNT" AS float) END), 0) TRAN_AMOUNT,
					SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN "RECPAY_INT_AMOUNT"
ELSE (-1) * "RECPAY_INT_AMOUNT"
END) "RECPAY_INT_AMOUNT"
				FROM DEPOTRAN
				WHERE CAST("TRAN_DATE" AS date) <= CAST('.$etdate.'AS date)
			 AND "BRANCH_CODE"='.$branch_code.'
				GROUP BY "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO")DEPOTRAN ON DPMASTER."BANKACNO" = DEPOTRAN."TRAN_ACNO"
		LEFT OUTER JOIN
			(SELECT "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO",
					CAST("TRAN_STATUS" AS INTEGER),
					"TRAN_DATE",
					COALESCE(SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("TRAN_AMOUNT" AS FLOAT)
ELSE (-1) * CAST("TRAN_AMOUNT" AS FLOAT)
END), 0) DAILY_AMOUNT,
SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("RECPAY_INT_AMOUNT" AS FLOAT)
ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS FLOAT)
END) RECPAY_INT_AMOUNT
				FROM DAILYTRAN
				WHERE CAST("TRAN_DATE" AS DATE) <= CAST('.$etdate.'AS DATE)
					AND CAST("TRAN_STATUS" AS INTEGER) = '.$tran_status.'
			 AND "BRANCH_CODE"='.$branch_code.'
				GROUP BY "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO",
					"TRAN_DATE",
					CAST("TRAN_STATUS" AS INTEGER)) DAILYTRAN ON DPMASTER."BANKACNO" = DAILYTRAN."TRAN_ACNO"
		WHERE DPMASTER."AC_ACNOTYPE" = DEPOTRAN."TRAN_ACNOTYPE"
			AND DPMASTER."AC_TYPE" = CAST(DEPOTRAN."TRAN_ACTYPE" AS INTEGER)
			AND DPMASTER."AC_ACNOTYPE" = DAILYTRAN."TRAN_ACNOTYPE"
			AND DPMASTER."AC_TYPE" = CAST(DAILYTRAN."TRAN_ACTYPE" AS INTEGER)
			AND (DPMASTER."AC_OPDATE" IS NULL
			OR CAST(DPMASTER."AC_OPDATE" AS DATE) <= CAST('.$etdate.' AS DATE))
			AND (CAST(DPMASTER."AC_CLOSEDT" AS DATE) IS NULL
			OR CAST(DPMASTER."AC_CLOSEDT" AS DATE) > CAST('.$stdate.'AS DATE))
	 AND DPMASTER."BRANCH_CODE"='.$branch_code.' AND DPMASTER.STATUS=1 AND DPMASTER."SYSCHNG_LOGIN" IS NOT NULL
	)VWTMPOPBALANCE ON DPMASTER."BANKACNO"  = VWTMPOPBALANCE."BANKACNO" 
LEFT OUTER JOIN
	(SELECT "AC_ACNOTYPE",
			"AC_TYPE",
	        "AC_NO",
			"BANKACNO",
			"AC_OPDATE",
			"AC_CLOSEDT",
			(COALESCE(CASE "AC_OP_CD"
WHEN '.$var1.' THEN CAST("AC_OP_BAL" AS FLOAT)
ELSE (-1) * CAST("AC_OP_BAL" AS FLOAT)
END,0) + COALESCE(DEPOTRAN.TRAN_AMOUNT,
0) + COALESCE(DAILYTRAN.DAILY_AMOUNT,
0)) CLOSING_BALANCE,
			(COALESCE(CASE DPMASTER."AC_OP_CD"
WHEN '.$var1.' THEN CAST(DPMASTER."AC_PAYBLEINT_OP" AS FLOAT)
ELSE (-1) * CAST(DPMASTER."AC_PAYBLEINT_OP" AS FLOAT)
END,0) + COALESCE(DEPOTRAN."RECPAY_INT_AMOUNT",
0) + COALESCE(DAILYTRAN.RECPAY_INT_AMOUNT,
0)) RECPAY_INT_AMOUNT
		FROM DPMASTER
		LEFT OUTER JOIN
			(SELECT "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO",
					COALESCE(SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("TRAN_AMOUNT" AS float)
ELSE (-1) * CAST("TRAN_AMOUNT" AS float) END),0) TRAN_AMOUNT,
					SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("RECPAY_INT_AMOUNT" AS float)
ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS float)
END) "RECPAY_INT_AMOUNT"
				FROM DEPOTRAN
				WHERE CAST("TRAN_DATE" AS date) <= CAST('.$etdate.'AS date)
			 AND "BRANCH_CODE"='.$branch_code.'
				GROUP BY "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO") DEPOTRAN ON DPMASTER."BANKACNO" = DEPOTRAN."TRAN_ACNO"
		LEFT OUTER JOIN
			(SELECT "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO",
					COALESCE(SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("TRAN_AMOUNT" AS float)
ELSE (-1) * CAST("TRAN_AMOUNT" AS float) END), 0) DAILY_AMOUNT,
					SUM(CASE "TRAN_DRCR"
WHEN '.$var1.' THEN CAST("RECPAY_INT_AMOUNT" AS float)
ELSE (-1) * CAST("RECPAY_INT_AMOUNT" AS float)
END) RECPAY_INT_AMOUNT
				FROM DAILYTRAN
				WHERE CAST("TRAN_DATE" AS date) <= CAST('.$etdate.' AS date)
					AND CAST("TRAN_STATUS" AS INTEGER) = '.$tran_status.'
			 AND "BRANCH_CODE"='.$branch_code.'
				GROUP BY "TRAN_ACNOTYPE",
					"TRAN_ACTYPE",
					"TRAN_ACNO") DAILYTRAN ON DPMASTER."BANKACNO" = DAILYTRAN."TRAN_ACNO"
		WHERE DPMASTER."AC_ACNOTYPE" = DEPOTRAN."TRAN_ACNOTYPE"
			AND DPMASTER."AC_TYPE" = CAST(DEPOTRAN."TRAN_ACTYPE" AS INTEGER)
			AND DPMASTER."AC_ACNOTYPE" = DAILYTRAN."TRAN_ACNOTYPE"
			AND DPMASTER."AC_TYPE" = CAST(DAILYTRAN."TRAN_ACTYPE" AS INTEGER)
			AND (DPMASTER."AC_OPDATE" IS NULL
			OR CAST(DPMASTER."AC_OPDATE" AS DATE) <= CAST('.$etdate.' AS DATE))
			AND (DPMASTER."AC_CLOSEDT" IS NULL
			OR CAST(DPMASTER."AC_CLOSEDT" AS DATE) > CAST('.$stdate.'AS DATE))
	 AND DPMASTER."BRANCH_CODE"='.$branch_code.' AND DPMASTER.STATUS='.$status.' AND DPMASTER."SYSCHNG_LOGIN" IS NOT NULL
	)VWTMPCLBALANCE ON DPMASTER."BANKACNO"  = VWTMPCLBALANCE."BANKACNO" 
LEFT OUTER JOIN SCHEMAST ON DPMASTER."AC_TYPE" = SCHEMAST."id"
LEFT OUTER JOIN CUSTOMERADDRESS ON CUSTOMERADDRESS."idmasterID" = DPMASTER."AC_CUSTID"
LEFT OUTER JOIN IDMASTER ON IDMASTER.ID = DPMASTER."idmasterID"
LEFT OUTER JOIN TDSTRAN ON TDSTRAN."AC_NO" = DPMASTER."BANKACNO"
WHERE DPMASTER."AC_CLOSEDT" IS NULL
	AND DPMASTER."AC_CUSTID" = '.$AC_CUSTID.'
	
	AND DPMASTER."AC_ACNOTYPE" = '.$AC_ACNOTYPE.'
order by "AC_OPDATE","BANKACNO"';
}

echo $query;




$sql =pg_query($conn,$query);
$i = 0;
$TOTAL_PAID_INTEREST=$T1;
$TOTAL_UNPAID_INTEREST=$T2;
$t3=0;


// if (pg_num_rows($sql) == 0) {
//    include 'errandmsg.html';
// }else

    while ($row = pg_fetch_assoc($sql)) {
        $tmp = [
        
        $TOTAL=$TOTAL+$row['AC_SCHMAMT'],
        $T1=$T1+$row['interest_paid_amount'],
        $T2=$T2+$row['payable_interest'],
        $t3=$t3+$row['TDS_AMOUNT'],
        $C=convertNumberToWordsForIndia($T1),
        $D=convertNumberToWordsForIndia($T2),

            
        
            'AC_ACNOTYPE' => $row['AC_ACNOTYPE'],
            'AC_TYPE' => $row['AC_TYPE'],
            'BANKACNO' => $row['BANKACNO'],
            'AC_NAME' => $row['AC_NAME'],
            'AC_CUSTID' => $row['AC_CUSTID'],
            'AC_REF_RECEIPTNO' => $row['AC_REF_RECEIPTNO'],
            'AC_CLOSEDT' => $row['AC_CLOSEDT'],
            'AC_OPDATE' => $row['AC_OPDATE'],
            'AC_SCHMAMT' =>sprintf("%.2f", ($row['AC_SCHMAMT'] + 0.0)),
            'interest_paid_amount' => sprintf("%.2f", ($row['interest_paid_amount'] + 0.0)),
            'payable_interest' => sprintf("%.2f", ($row['payable_interest'] + 0.0)),
            'OPBALANCE' => $row['OPBALANCE'],
            'CLBALANCE' => $row['CLBALANCE'],
            'AC_ADDR'=>$row['AC_ADDR'],
            'AC_PANNO'=>$row['AC_PANNO'],
            'TDS_AMOUNT'=> sprintf("%.2f", ($row['TDS_AMOUNT'] + 0.0)),
            // 'LAST_EXEC_DATE' => $row['LAST_EXEC_DATE'],
            // 'SYSADD_LOGIN' => $row['SYSADD_LOGIN'],
            // 'ac_name' => $row['ac_name'],
            // 'UserCode' => $row['UserCode'],
            // 'NAME' => $row['NAME'],
            // 'startDate' => $startDate,
            // 'endDate' => $endDate,
         

            'branchName'=>$branchName,
            'bankName'=>$bankName,

            
            'FLAG1'=>$FLAG1,
            'branch' => $branch,
            'stdate' => $stdate_,
            'etdate' => $etdate_,
            'TOTAL' =>sprintf("%.2f", ($TOTAL + 0.0)),
            'T1'=>sprintf("%.2f", ($T1 + 0.0)),
            'T2'=>sprintf("%.2f", ($T2 + 0.0)),
            't3'=>sprintf("%.2f", ($t3 + 0.0)),
            'TOTAL_PAID_INTEREST'=>$C,
            'TOTAL_UNPAID_INTEREST'=>$D,

            // '.$var.'=>$C,
            // '.$var1.'=>$D,
            
            // 'revoke' => $revoke,
            // 'bankName' => $bankName,

        ];
        $data[$i] = $tmp;
        $i++;

        // echo '<pre>';
        // print_r($tmp);
        // echo '</pre>';
    
}
// ob_end_clean();


// // echo $query;
//  //print_r($data);
// $config = ['driver' => 'array', 'data' => $data];
// $repandt = new PHPJasperXML();
// $repandt->load_xml_file($filename)    
//     ->setDataSource($config)
//     ->export('Pdf');
    
  
    
    
//}
function convertNumberToWordsForIndia($number){
  echo "IN FUNCTION";
  //A function to convert numbers into Indian readable words with Cores, Lakhs and Thousands.
  $words = array(
  '0'=> 'zero' ,'1'=> 'one' ,'2'=> 'two' ,'3' => 'three','4' => 'four','5' => 'five',
  '6' => 'six','7' => 'seven','8' => 'eight','9' => 'nine','10' => 'ten',
  '11' => 'eleven','12' => 'twelve','13' => 'thirteen','14' => 'fouteen','15' => 'fifteen',
  '16' => 'sixteen','17' => 'seventeen','18' => 'eighteen','19' => 'nineteen','20' => 'twenty',
  '30' => 'thirty','40' => 'fourty','50' => 'fifty','60' => 'sixty','70' => 'seventy',
  '80' => 'eighty','90' => 'ninty');
  
  //First find the length of the number
  $number_length = strlen($number);
  //Initialize an empty array
  $number_array = array(0,0,0,0,0,0,0,0,0);        
  $received_number_array = array();
  
  //Store all received numbers into an array
  for($i=0;$i<$number_length;$i++){    
    $received_number_array[$i] = substr($number,$i,1);    
  }

  //Populate the empty array with the numbers received - most critical operation
  for($i=9-$number_length,$j=0;$i<9;$i++,$j++){ 
      $number_array[$i] = $received_number_array[$j]; 
  }

  $number_to_words_string = "";
  //Finding out whether it is teen ? and then multiply by 10, example 17 is seventeen, so if 1 is preceeded with 7 multiply 1 by 10 and add 7 to it.
  for($i=0,$j=1;$i<9;$i++,$j++){
      //"01,23,45,6,78"
      //"00,10,06,7,42"
      //"00,01,90,0,00"
      if($i==0 || $i==2 || $i==4 || $i==7){
          if($number_array[$j]==0 || $number_array[$i] == "1"){
              $number_array[$j] = intval($number_array[$i])*10+$number_array[$j];
              $number_array[$i] = 0;
          }
             
      }
  }

  $value = "";
  for($i=0;$i<9;$i++){
      if($i==0 || $i==2 || $i==4 || $i==7){    
          $value = $number_array[$i]*10; 
      }
      else{ 
          $value = $number_array[$i];    
      }            
      if($value!=0)         {    $number_to_words_string.= $words["$value"]." "; }
      if($i==1 && $value!=0){    $number_to_words_string.= "Crores "; }
      if($i==3 && $value!=0){    $number_to_words_string.= "Lakhs ";    }
      if($i==5 && $value!=0){    $number_to_words_string.= "Thousand "; }
      if($i==6 && $value!=0){    $number_to_words_string.= "Hundred "; }            
      if($i==0 && $value=0){    $number_to_words_string.= "Zero "; }            

  }
  if($number_length>9){ $number_to_words_string = "Sorry This does not support more than 99 Crores"; }
  return ucwords(strtolower($number_to_words_string." Only."));
}
?>
